searchState.loadedDescShard("schannel", 0, "Bindings to the Windows SChannel APIs.\nAllows access to the underlying schannel API …\nGet a raw pointer from the underlying handle / pointer.\nBindings to winapi’s certificate-chain related APIs.\nBindings to Windows <code>PCCERT_CONTEXT</code> APIs.\nBindings to winapi’s certificate-store related APIs.\nCryptoAPI private keys.\nCryptoAPI key providers.\nConstructs an instance of this type from its handle / …\nDeprecated.\nCNG private keys.\nSchannel credentials.\nSchannel TLS streams.\nA (simple) certificate chain\nA certificate chain context (consisting of multiple chains)\nAn iterator that iterates over all chains in a context\nAn iterator that iterates over all certificates in a chain\nReturn an iterator over all certificates in this chain\nReturn an iterator over all certificate chains in this …\nGet the final (for a successful verification this means …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the n-th certificate from the current chain\nRetrieves the specified chain from the context.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no certificates in the chain\nReturns the number of certificates in the chain\nA builder type for certificate private key lookup.\nCertificate is valid for all uses\nWrapper of a winapi certificate, or a <code>PCCERT_CONTEXT</code>.\nA CryptoAPI provider.\nA supported hashing algorithm\nThe specification of a private key.\nA CNG provider.\nCertificate is valid for uses specified. No entries means …\nThe private key associated with a certificate context.\nA builder used to set the private key associated with a …\nValid uses of a Certificate - All, or specific OIDs\nAcquires the private key handle.\nFor a remote certificate, returns a certificate store …\nIf set, the certificate’s public key will be compared …\nThe name of the key container.\nDeletes this certificate from its certificate store.\nReturns the property displayed by the certificate UI. This …\nReturns a hash of this certificate\nReturns a string that contains the display name for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a PEM-formatted X509 certificate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerifies the time validity of this certificate relative to …\nIf set, the handle to the key provider can be kept open …\nA key used to encrypt/decrypt session keys.\nThe specification of the private key to retrieve.\nIf set, the key container contains machine keys.\nDecodes a DER-formatted X509 certificate.\nReturns a builder used to acquire the private key …\nThe name of the CSP.\nSets the private key for this certificate.\nConfigures the string that contains the display name for …\nReturns a builder used to set the private key associated …\nReturns the sha1 hash of this certificate\nReturns the <code>&lt;SIGNATURE&gt;/&lt;HASH&gt;</code> string representing the …\nA key used to create and verify digital signatures.\nReturns the signature hash.\nIf set, the lookup will not display any user interface, …\nIf set, the key container will attempt to open keys …\nCertificate subject public key info\nGet certificate in binary DER form\nGet certificate as PEM-formatted X509 certificate.\nSets the CSP type.\nReturns the valid uses for this certificate\nThe function makes no check for an existing matching …\nArgument to the <code>add_cert</code> function indicating how a …\nRepresentation of certificate store on Windows, wrapping a …\nAn iterator over the certificates contained in a <code>CertStore</code>…\nRepresentation of an in-memory certificate store.\nIf a matching certificate or a link to a matching …\nIf a matching certificate or a link to a matching …\nIf a matching certificate or a link to a matching …\nA builder type for imports of PKCS #12 archives.\nIf a link to a matching certificate exists, that existing …\nIf a matching certificate exists in the store, the …\nIf a matching certificate or a link to a matching …\nAdds a certificate context to this store.\nAdds a new certificate to this memory store.\nAdds a new CTL to this memory store, in its encoded form.\nReturns an iterator over the certificates in this …\nExports this certificate store as a PKCS#12-encoded blob.\nIf set, the private key in the archive will be exportable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImports certificates from a PKCS #12 archive, returning a …\nImports a PKCS#12-encoded key/certificate pair, returned …\nIf set, all extended properties of the certificate will be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this memory store, returning the underlying …\nIf set, the private keys are stored under the local …\nCreates a new in-memory certificate store which …\nReturns a new <code>PfxImportOptions</code> with default settings.\nIf set, the private key in the archive will not be …\nOpens up the specified key store within the context of the …\nOpens up the specified key store within the context of the …\nSets the password to be used to decrypt the archive.\nA handle to a key.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA builder for <code>CryptProv</code>s.\nA CryptoAPI handle to a provider of a key.\nA builder for key imports.\nAn identifier of the type of cryptography provider to be …\nAcquires a container.\nSets the name for this key container.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImports a key into this provider.\nImports a DER-encoded PKCS1 private key.\nImports a DER-encoded PKCS8 private key.\nImports a PEM-encoded PKCS8 private key. This functions …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf set, the container will be stored as a machine rather …\nReturns a new builder with default settings.\nIf set, the container will be created.\nSets the name of the CSP to be used.\nIf set, an error will be returned if user intervention is …\nIf set, private keys will not be accessible or persisted.\nA CNG handle to a key.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdvanced Encryption Standard (AES).\n128 bit AES.\n192 bit AES.\n256 bit AES.\nTemporary algorithm identifier for handles of …\nAlgorithms supported by Schannel.\nA builder type for <code>SchannelCred</code>s.\nAn algorithm to create a 40-bit DES key that has parity …\nDES encryption algorithm.\nDESX encryption algorithm.\nDiffie-Hellman ephemeral key exchange algorithm.\nDiffie-Hellman store and forward key exchange algorithm.\nThe communication direction that an <code>SchannelCred</code> will …\nDSA public key signature algorithm.\nElliptic curve Diffie-Hellman key exchange algorithm.\nEphemeral elliptic curve Diffie-Hellman key exchange …\nElliptic curve digital signature algorithm.\nOne way function hashing algorithm.\nHMAC keyed hash algorithm.\nHughes MD5 hashing algorithm.\nServer-side, inbound connections.\nMAC keyed hash algorithm.\nMD2 hashing algorithm.\nMD4 hashing algorithm.\nMD5 hashing algorithm.\nNo signature algorithm..\nClient-side, outbound connections.\nProtocols supported by Schannel.\nRC2 block encryption algorithm.\nRC4 stream encryption algorithm.\nRC5 block encryption algorithm.\nRSA public key exchange algorithm.\nRSA public key signature algorithm.\nAn SChannel credential.\nSHA hashing algorithm.\n256 bit SHA hashing algorithm.\n384 bit SHA hashing algorithm.\n512 bit SHA hashing algorithm.\nSecure Sockets Layer 3.0\nTransport Layer Security 1.0\nTransport Layer Security 1.1\nTransport Layer Security 1.2\nTransport Layer Security 1.3\nTriple DES encryption algorithm.\nTwo-key triple DES encryption with effective key length …\nCreates a new <code>SchannelCred</code>.\nReturns a builder.\nAdd a certificate to get passed down when the credentials …\nSets the protocols enabled for credentials created from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>Builder</code>.\nSets the algorithms supported for credentials created from …\nA builder type for <code>TlsStream</code>s.\nA struct used to wrap various cert chain validation …\nA fatal I/O error occurred\nA failure which can happen during the <code>Builder::initialize</code> …\nThe stream connection is in progress, but the handshake is …\nA stream which has not yet completed its handshake.\nAn Schannel TLS stream.\nInitialize a new TLS session where the stream provided …\nDetermines if the server’s hostname will be checked …\nSpecifies a custom certificate store which is later used …\nReturns the certificate used to identify this side of the …\nReturns the final certificate chain in the certificate …\nInitialize a new TLS session where the stream provided …\nSets the domain associated with connections created with …\nReturns the certificate that failed validation if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the buffer of pending data.\nReturns a mutable reference to the wrapped stream.\nReturns a mutable reference to the inner stream.\nReturns a reference to the wrapped stream.\nReturns a shared reference to the inner stream.\nRestarts the handshake process.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if this stream is the server- or client-side of …\nReturns the negotiated application protocol for this tls …\nReturns a new <code>Builder</code>.\nReturns the peer’s certificate, if available.\nRequests one of a set of application protocols using alpn\nReturns the result of the built-in certificate …\nReturns whether or not the session was resumed.\nShuts the TLS session down.\nDetermines if Server Name Indication (SNI) will be used.\nSet a verification callback to be used for connections …\nIn the case of a WouldBlock error, we expect another call …")